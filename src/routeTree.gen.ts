/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ForGroupsImport } from './routes/for-groups'
import { Route as FavoritesImport } from './routes/favorites'
import { Route as ExploreVenuesImport } from './routes/explore-venues'
import { Route as AccountImport } from './routes/account'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as ManageReservationsIndexImport } from './routes/manage-reservations/index'
import { Route as VenueIdImport } from './routes/venue/$id'
import { Route as AuthenticatedManageVenuesIndexImport } from './routes/_authenticated/manage-venues/index'
import { Route as AuthenticatedManageVenuesHostVenueIdImport } from './routes/_authenticated/manage-venues/host-venue/$id'

// Create/Update Routes

const ForGroupsRoute = ForGroupsImport.update({
  id: '/for-groups',
  path: '/for-groups',
  getParentRoute: () => rootRoute,
} as any)

const FavoritesRoute = FavoritesImport.update({
  id: '/favorites',
  path: '/favorites',
  getParentRoute: () => rootRoute,
} as any)

const ExploreVenuesRoute = ExploreVenuesImport.update({
  id: '/explore-venues',
  path: '/explore-venues',
  getParentRoute: () => rootRoute,
} as any)

const AccountRoute = AccountImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ManageReservationsIndexRoute = ManageReservationsIndexImport.update({
  id: '/manage-reservations/',
  path: '/manage-reservations/',
  getParentRoute: () => rootRoute,
} as any)

const VenueIdRoute = VenueIdImport.update({
  id: '/venue/$id',
  path: '/venue/$id',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedManageVenuesIndexRoute =
  AuthenticatedManageVenuesIndexImport.update({
    id: '/manage-venues/',
    path: '/manage-venues/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedManageVenuesHostVenueIdRoute =
  AuthenticatedManageVenuesHostVenueIdImport.update({
    id: '/manage-venues/host-venue/$id',
    path: '/manage-venues/host-venue/$id',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountImport
      parentRoute: typeof rootRoute
    }
    '/explore-venues': {
      id: '/explore-venues'
      path: '/explore-venues'
      fullPath: '/explore-venues'
      preLoaderRoute: typeof ExploreVenuesImport
      parentRoute: typeof rootRoute
    }
    '/favorites': {
      id: '/favorites'
      path: '/favorites'
      fullPath: '/favorites'
      preLoaderRoute: typeof FavoritesImport
      parentRoute: typeof rootRoute
    }
    '/for-groups': {
      id: '/for-groups'
      path: '/for-groups'
      fullPath: '/for-groups'
      preLoaderRoute: typeof ForGroupsImport
      parentRoute: typeof rootRoute
    }
    '/venue/$id': {
      id: '/venue/$id'
      path: '/venue/$id'
      fullPath: '/venue/$id'
      preLoaderRoute: typeof VenueIdImport
      parentRoute: typeof rootRoute
    }
    '/manage-reservations/': {
      id: '/manage-reservations/'
      path: '/manage-reservations'
      fullPath: '/manage-reservations'
      preLoaderRoute: typeof ManageReservationsIndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/manage-venues/': {
      id: '/_authenticated/manage-venues/'
      path: '/manage-venues'
      fullPath: '/manage-venues'
      preLoaderRoute: typeof AuthenticatedManageVenuesIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/manage-venues/host-venue/$id': {
      id: '/_authenticated/manage-venues/host-venue/$id'
      path: '/manage-venues/host-venue/$id'
      fullPath: '/manage-venues/host-venue/$id'
      preLoaderRoute: typeof AuthenticatedManageVenuesHostVenueIdImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedManageVenuesIndexRoute: typeof AuthenticatedManageVenuesIndexRoute
  AuthenticatedManageVenuesHostVenueIdRoute: typeof AuthenticatedManageVenuesHostVenueIdRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedManageVenuesIndexRoute: AuthenticatedManageVenuesIndexRoute,
  AuthenticatedManageVenuesHostVenueIdRoute:
    AuthenticatedManageVenuesHostVenueIdRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/account': typeof AccountRoute
  '/explore-venues': typeof ExploreVenuesRoute
  '/favorites': typeof FavoritesRoute
  '/for-groups': typeof ForGroupsRoute
  '/venue/$id': typeof VenueIdRoute
  '/manage-reservations': typeof ManageReservationsIndexRoute
  '/manage-venues': typeof AuthenticatedManageVenuesIndexRoute
  '/manage-venues/host-venue/$id': typeof AuthenticatedManageVenuesHostVenueIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/account': typeof AccountRoute
  '/explore-venues': typeof ExploreVenuesRoute
  '/favorites': typeof FavoritesRoute
  '/for-groups': typeof ForGroupsRoute
  '/venue/$id': typeof VenueIdRoute
  '/manage-reservations': typeof ManageReservationsIndexRoute
  '/manage-venues': typeof AuthenticatedManageVenuesIndexRoute
  '/manage-venues/host-venue/$id': typeof AuthenticatedManageVenuesHostVenueIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/account': typeof AccountRoute
  '/explore-venues': typeof ExploreVenuesRoute
  '/favorites': typeof FavoritesRoute
  '/for-groups': typeof ForGroupsRoute
  '/venue/$id': typeof VenueIdRoute
  '/manage-reservations/': typeof ManageReservationsIndexRoute
  '/_authenticated/manage-venues/': typeof AuthenticatedManageVenuesIndexRoute
  '/_authenticated/manage-venues/host-venue/$id': typeof AuthenticatedManageVenuesHostVenueIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/account'
    | '/explore-venues'
    | '/favorites'
    | '/for-groups'
    | '/venue/$id'
    | '/manage-reservations'
    | '/manage-venues'
    | '/manage-venues/host-venue/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/account'
    | '/explore-venues'
    | '/favorites'
    | '/for-groups'
    | '/venue/$id'
    | '/manage-reservations'
    | '/manage-venues'
    | '/manage-venues/host-venue/$id'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/account'
    | '/explore-venues'
    | '/favorites'
    | '/for-groups'
    | '/venue/$id'
    | '/manage-reservations/'
    | '/_authenticated/manage-venues/'
    | '/_authenticated/manage-venues/host-venue/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  AccountRoute: typeof AccountRoute
  ExploreVenuesRoute: typeof ExploreVenuesRoute
  FavoritesRoute: typeof FavoritesRoute
  ForGroupsRoute: typeof ForGroupsRoute
  VenueIdRoute: typeof VenueIdRoute
  ManageReservationsIndexRoute: typeof ManageReservationsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AccountRoute: AccountRoute,
  ExploreVenuesRoute: ExploreVenuesRoute,
  FavoritesRoute: FavoritesRoute,
  ForGroupsRoute: ForGroupsRoute,
  VenueIdRoute: VenueIdRoute,
  ManageReservationsIndexRoute: ManageReservationsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/account",
        "/explore-venues",
        "/favorites",
        "/for-groups",
        "/venue/$id",
        "/manage-reservations/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/manage-venues/",
        "/_authenticated/manage-venues/host-venue/$id"
      ]
    },
    "/account": {
      "filePath": "account.tsx"
    },
    "/explore-venues": {
      "filePath": "explore-venues.tsx"
    },
    "/favorites": {
      "filePath": "favorites.tsx"
    },
    "/for-groups": {
      "filePath": "for-groups.tsx"
    },
    "/venue/$id": {
      "filePath": "venue/$id.tsx"
    },
    "/manage-reservations/": {
      "filePath": "manage-reservations/index.tsx"
    },
    "/_authenticated/manage-venues/": {
      "filePath": "_authenticated/manage-venues/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/manage-venues/host-venue/$id": {
      "filePath": "_authenticated/manage-venues/host-venue/$id.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
